
function wideband_fft_top_config(this_block)

  % Revision History:
  %
  %   01-Dec-2020  (06:19 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /data/home/talonm/casper_dspdevel/wrappers/simulink/hdl_library_wb_fft_slim_top.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('wideband_fft_top');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('rst');
  this_block.addSimulinkInport('in_sync');
  this_block.addSimulinkInport('in_valid');
  this_block.addSimulinkInport('in_bsn');
  this_block.addSimulinkInport('in_sop');
  this_block.addSimulinkInport('in_eop');
  this_block.addSimulinkInport('in_empty');
  this_block.addSimulinkInport('in_err');
  this_block.addSimulinkInport('in_channel');
  this_block.addSimulinkInport('in_im_0');
  this_block.addSimulinkInport('in_re_0');

  this_block.addSimulinkOutport('out_sync');
  this_block.addSimulinkOutport('out_valid');
  this_block.addSimulinkOutport('out_bsn');
  this_block.addSimulinkOutport('out_sop');
  this_block.addSimulinkOutport('out_eop');
  this_block.addSimulinkOutport('out_empty');
  this_block.addSimulinkOutport('out_err');
  this_block.addSimulinkOutport('out_channel');
  this_block.addSimulinkOutport('out_im_0');
  this_block.addSimulinkOutport('out_re_0');

  out_sync_port = this_block.port('out_sync');
  out_sync_port.setType('UFix_1_0');
  out_sync_port.useHDLVector(false);
  out_valid_port = this_block.port('out_valid');
  out_valid_port.setType('UFix_1_0');
  out_valid_port.useHDLVector(false);
  out_sop_port = this_block.port('out_sop');
  out_sop_port.setType('UFix_1_0');
  out_sop_port.useHDLVector(false);
  out_eop_port = this_block.port('out_eop');
  out_eop_port.setType('UFix_1_0');
  out_eop_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('rst').width ~= 1);
      this_block.setError('Input data type for port "rst" must have width=1.');
    end

    this_block.port('rst').useHDLVector(false);

    if (this_block.port('in_sync').width ~= 1);
      this_block.setError('Input data type for port "in_sync" must have width=1.');
    end

    this_block.port('in_sync').useHDLVector(false);

    if (this_block.port('in_valid').width ~= 1);
      this_block.setError('Input data type for port "in_valid" must have width=1.');
    end

    this_block.port('in_valid').useHDLVector(false);

    % (!) Port 'in_bsn' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

    if (this_block.port('in_sop').width ~= 1);
      this_block.setError('Input data type for port "in_sop" must have width=1.');
    end

    this_block.port('in_sop').useHDLVector(false);

    if (this_block.port('in_eop').width ~= 1);
      this_block.setError('Input data type for port "in_eop" must have width=1.');
    end

    this_block.port('in_eop').useHDLVector(false);

    % (!) Port 'in_empty' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

    % (!) Port 'in_err' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

    % (!) Port 'in_channel' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

    % (!) Port 'in_im_0' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

    % (!) Port 'in_re_0' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

  % (!) Port 'out_bsn' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
  % (!) Port 'out_empty' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
  % (!) Port 'out_err' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
  % (!) Port 'out_channel' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
  % (!) Port 'out_im_0' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
  % (!) Port 'out_re_0' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('use_reorder','boolean','use_reorder');
  this_block.addGeneric('use_fft_shift','boolean','use_fft_shift');
  this_block.addGeneric('use_separate','boolean','use_separate');
  this_block.addGeneric('nof_chan','natural','nof_chan');
  this_block.addGeneric('wb_factor','natural','wb_factor');
  this_block.addGeneric('twiddle_offset','natural','twiddle_offset');
  this_block.addGeneric('nof_points','natural','nof_points');
  this_block.addGeneric('in_dat_w','natural','in_dat_w');
  this_block.addGeneric('out_dat_w','natural','out_dat_w');
  this_block.addGeneric('out_gain_w','natural','out_gain_w');
  this_block.addGeneric('stage_dat_w','natural','stage_dat_w');
  this_block.addGeneric('guard_w','natural','guard_w');
  this_block.addGeneric('guard_enable','boolean','guard_enable');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('hdl_library_wb_fft_slim_top.vhd');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

