function [vhdlfile, memfile, entityname] = reorder_code_gen(unique_prefix, inout_port_count, inout_port_bit_width, reorder_map)
    %gather all the string arrays required to write full file:
    filepathscript = fileparts(which('reorder_code_gen'));                 %get the filepath of this script (and thereby all scripts needed)
    %where the top vhdl file will be generated
    vhdlfilefolder = [fileparts(which(bdroot)) '/tmp_dspdevel'];
    if ~exist(vhdlfilefolder, 'dir')
        mkdir(vhdlfilefolder);
    end
    %and what it will be named
    entityname = [unique_prefix '_reorder'];

    % vhdlfile = fullfile(vhdlfilefolder, [bdroot '_' unique_prefix '_reorder.vhd']);           %filename for vhd file
    vhdlfile = fullfile(vhdlfilefolder, [bdroot '_' entityname '.vhd']);           %filename for vhd file
    memfile = fullfile(vhdlfilefolder, [bdroot '_' entityname '.mem']);

    reorder_map_length = length(reorder_map);
    % Compute the cyclic order of a permutation
    order = 1;
    for i=1:reorder_map_length
        j = -1;
        cur_order = 1;
        while_count = 1;
        while j+1 ~= i
            if while_count > reorder_map_length
                error(sprintf("Reorder seems to have an interminable order: stuck at index %d.", i));
                break;
            end

            if j < 0
                j = reorder_map(i);
            else
                j = reorder_map(j+1);
                cur_order = cur_order + 1;
            end
            while_count = while_count + 1;
        end
        order = lcm(order, cur_order);
    end
    
    if order ~= 1
        reorder_map_bits = ceil(log2(reorder_map_length));
        reorder_map_hexdigits = ceil(reorder_map_bits/4);
        
        Mfile = fopen(memfile,'w');
        if(Mfile == -1)
            error("Cannot open mem file");
        end
        for i = 1:reorder_map_length
            fprintf(Mfile,'%s',dec2hex(reorder_map(i), reorder_map_hexdigits));
            if i < reorder_map_length
                fprintf(Mfile,'\n');
            end
        end
        fclose(Mfile);
    else
        memfile = "UNUSED";
    end

    upperlines = [
    "-- A wrapper for the reorder block."
    "-- This file is generated by `reorder_code_gen.m`"
    "-- @author: Ross Donnachie."
    "-- @company: Mydon Solutions."
    ""
    "LIBRARY IEEE, common_slv_arr_pkg_lib;"
    "USE IEEE.std_logic_1164.all;"
    "USE common_slv_arr_pkg_lib.common_slv_arr_pkg.all;"
    ""
    sprintf("ENTITY %s is", entityname)
    "generic ("
    "  g_map_latency: NATURAL;"
    "  g_bram_latency: NATURAL;"
    "  g_fanout_latency: NATURAL;"
    "  g_double_buffer: BOOLEAN;"
    "  g_block_ram: BOOLEAN;"
    "  g_software_controlled: BOOLEAN"
    ");"
    "port ("
    "  clk   : in std_logic;"
    "  ce    : in std_logic;"
    "  i_sync  : IN std_logic;"
    "  i_en  : IN std_logic;"
    "  o_sync  : OUT std_logic;"
    "  o_valid  : OUT std_logic;"
    ];

    midlines = [
    ");"
    "end ENTITY;"
    ""
    sprintf("ARCHITECTURE rtl of %s is", entityname)
    ""
    "  function setup_order(double_buffer : boolean; order : NATURAL) return NATURAL is"
    "  begin"
    "    if double_buffer then"
    "      return 2;"
    "    else"
    "      return order;"
    "    end if;"
    "  end function;"
    ""
    sprintf("  CONSTANT c_order : NATURAL := setup_order(g_double_buffer, %d);", order)
    sprintf("  SIGNAL slv_arr_in : t_slv_arr(0 to %d-1, i_data_0'range) := (OTHERS => (OTHERS => '0'));", inout_port_count)
    sprintf("  SIGNAL slv_arr_out : t_slv_arr(0 to %d-1, o_data_0'range) := (OTHERS => (OTHERS => '0'));", inout_port_count)
    sprintf("  -- reorder map: %s;", strjoin(string(reorder_map), ', '))
    "begin"
    ""

    "  gen_slv_arr_bit_stitch: for i in i_data_0'range generate"
    "    --v generated slv_array index knit v--"
    ];

    lowerlines = [
    "    --^ generated slv_array index knit ^--"
    "  end generate;"
    ""
    "  u_reorder : ENTITY work.reorder"
    "    generic map ("
    "      g_reorder_order => c_order,"
    sprintf("      g_reorder_length => %d,", reorder_map_length)
    "      g_map_latency => g_map_latency,"
    "      g_bram_latency => g_bram_latency,"
    "      g_fanout_latency => g_fanout_latency,"
    "      g_double_buffer => g_double_buffer,"
    "      g_block_ram => g_block_ram,"
    "      g_software_controlled => g_software_controlled,"
    sprintf('      g_mem_filepath => "%s"', regexprep(memfile, '(\\+)', '/'))
    "    )"
    "    port map ("
    "      clk => clk,"
    "      ce => ce,"
    "      i_sync => i_sync,"
    "      i_en => i_en,"
    "      i_data => slv_arr_in,"
    "      o_sync => o_sync,"
    "      o_valid => o_valid,"
    "      o_data => slv_arr_out"
    "    );"
    ""
    "end ARCHITECTURE;"
    ];

    Vfile = fopen(vhdlfile,'w');
    if(Vfile == -1)
        error("Cannot open vhdl file");
    end

    fprintf(Vfile,'%s\n',upperlines{:});
    ports = mknprts(inout_port_count, inout_port_bit_width);
    fprintf(Vfile,'%s\n',ports{:});

    fprintf(Vfile,'%s\n',midlines{:});
    assignments = mknassignments(inout_port_count);
    fprintf(Vfile,'%s\n',assignments{:});

    fprintf(Vfile,'%s\n',lowerlines{:});
    fclose(Vfile);
end

function chararr = mknprts(port_count, port_bit_width)
    chararr = strings(port_count*2,0);
    inport_str = "  i_data_%d : in std_logic_vector(%d-1 downto 0);";
    outport_str = "  o_data_%d : out std_logic_vector(%d-1 downto 0);";
    for i = 1:port_count
        chararr(2*i-1,1)=sprintf(inport_str, i-1, port_bit_width);
        if (i ~= port_count)
            chararr(2*i,1)=sprintf(outport_str, i-1, port_bit_width);
        else
            chararr(2*i,1)=sprintf(strip(outport_str,';'), i-1, port_bit_width);
        end
    end
end

function chararr = mknassignments(port_count)
    chararr = strings(port_count*2,0);

    inport_str = "  slv_arr_in(%d, i) <= i_data_%d(i);";
    outport_str = "  o_data_%d(i) <= slv_arr_out(%d, i);";

    for i = 1:port_count
        chararr(i,1)=sprintf(inport_str, i-1, i-1);
        chararr(port_count + i,1)=sprintf(outport_str, i-1, i-1);
        % chararr(i,1)=sprintf(outport_str, i, i-1);
    end
end
