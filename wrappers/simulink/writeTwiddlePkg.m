%% Write Twiddles to VHDL
% writes twiddles and meta data into a VHDL package
%-------------------------------------------------------------------------%
%   Author: Raj Thilak Rajan : rajan at astron.nl: Nov 2009
%   Copyright (C) 2009-2010
%   ASTRON (Netherlands Institute for Radio Astronomy)
%   P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
% 
%   This file is part of the UniBoard software suite.
%   The file is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
% 
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
% 
%   You should have received a copy of the GNU General Public License
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.
%-------------------------------------------------------------------------%
function writeTwiddlePkg(w_re,w_im,wMap,destfolder)

  Np=2*size(w_re,1);
  Nb=size(w_re,2);
  
  WRITE_RAW_TWIDDLES    =1;
  WRITE_TWIDDLE_MATRIX  =1;

  %write vhdl pkg containing the twiddles
  %--header--
  if ispc
    [fid,~]= fopen(fullfile(destfolder, './twiddlesPkg.vhd'),'w');
  else
    fid= fopen(fullfile(destfolder, './twiddlesPkg.vhd'),'w');
  end
  if fid == -1
     error("file not created"); 
  end
  fprintf(fid,'------------------------------------- \n');
  fprintf(fid,'--FILE GENERATED BY TWIDDLE GENERATOR \n');
  fprintf(fid,'--DO NOT EDIT THIS FILE !!! \n');
  fprintf(fid,'-------------------------------------\n');
  fprintf(fid,'--Author	:R.T.Rajan      \n');
  fprintf(fid,strcat('--Date    :',date,   '\n'));
  fprintf(fid,strcat('--Npoints :',int2str(Np),'\n'));
  fprintf(fid,strcat('--Nbits   :',int2str(Nb),'\n'));  
  fprintf(fid,'-------------------------------------\n\n\n');
  %-----------
  
  %--libraries--
  fprintf(fid,'Library ieee; \n');
  fprintf(fid,'use ieee.std_logic_1164.all; \n');
  fprintf(fid,'use ieee.numeric_std.all; \n\n ');
  %-------------
  
  %--package--
  fprintf(fid,'package twiddlesPkg is \n');
  fprintf(fid,' constant copyRightNotice: string \n');
  fprintf(fid,' := "Copyright 2009 , ASTRON. All rights reserved."; \n\n');
  %-----------
  
  
  %--types--
  fprintf(fid,...
  strcat('   subtype wTyp is std_logic_vector( ',int2str(Nb-1),...
          ' downto 0); \n'));
  fprintf(fid,...
  strcat('   type wRowTyp is array( 1 to  ' ,'\t\t',int2str((Np/2)),' )',...
          ' of wTyp; \n'));
        
  fprintf(fid,...
  strcat('   type wMapTyp is array( integer range 0 to' ,'\t',int2str(size(wMap,1)-1),', ',...
          ' integer range \t', int2str(size(wMap,2)), '\t','downto 1) of natural; \n\n'));
  %--------
  
  %--twiddles---
  if WRITE_RAW_TWIDDLES
    if (size(w_re, 1) == 1)
        fprintf(fid,...
            strcat('   constant wRe: wRowTyp := \n','  ( \n'));
        fprintf(fid,'      ');
        fprintf(fid,strcat('1=>','b"',w_re(1,:),'"'));
        fprintf(fid,'\n\t ); \n\n');
        fprintf(fid,...
            strcat('   constant wIm: wRowTyp := \n','  ( \n'));
        fprintf(fid,'      ');
        fprintf(fid,strcat('1=>','b"',w_im(1,:),'"'));
        fprintf(fid,'\n\t ); \n\n');
    else
        fprintf(fid,...
            strcat('   constant wRe: wRowTyp := \n','  ( \n'));
        for index= 1: (Np/2)-1
            fprintf(fid,'      ');
            fprintf(fid,strcat('b"',w_re(index,:),'",'));
            fprintf(fid,'\n');
        end
        fprintf(fid,strcat('    b"',w_re(Np/2,:),'"\n\t ); \n\n'));
        
        fprintf(fid,...
            strcat('   constant wIm: wRowTyp := \n','  ( \n'));
        for index= 1: (Np/2)-1
            fprintf(fid,'      ');
            fprintf(fid,strcat('b"',w_im(index,:),'",'));
            fprintf(fid,'\n');
        end
        fprintf(fid,strcat('    b"',w_im(Np/2,:),'"\n\t ); \n\n'));
    end
  end
  %------------
  
  %--twiddle map---
  if WRITE_TWIDDLE_MATRIX
    if (size(w_re, 1) == 1)
        fprintf(fid,...
          strcat('   constant wMap: wMapTyp := \n','  ( \n') );
        fprintf(fid, '0 => (1 => 1)\n');
        fprintf(fid, ');\n');
    else
        fprintf(fid,...
          strcat('   constant wMap: wMapTyp := \n','  ( \n') );
        for ii= 1: size(wMap,1)
          fprintf(fid,'       (');
          for jj= 1:size(wMap,2)
            if jj==size(wMap,2)
              fprintf(fid,strcat(int2str(wMap(ii,jj)),''));
            else
              fprintf(fid,strcat(int2str(wMap(ii,jj)),','));
            end
          end
          if ii==size(wMap,1)
            fprintf(fid,')\n');
          else
            fprintf(fid,'),\n');
          end
        end    
        fprintf(fid,'   ); \n\n');
     end
  end
  %-----------------
  
  %--end package--
  fprintf(fid,' end package twiddlesPkg; \n');
  
  fclose(fid);
return;
