function [vhdlfile, entityname] = square_transposer_code_gen(unique_prefix, inout_port_count, inout_port_bit_width)
    %gather all the string arrays required to write full file:
    filepathscript = fileparts(which('square_transposer_code_gen'));                 %get the filepath of this script (and thereby all scripts needed)
    %where the top vhdl file will be generated
    vhdlfilefolder = [fileparts(which(bdroot)) '/tmp_dspdevel'];
    if ~exist(vhdlfilefolder, 'dir')
        mkdir(vhdlfilefolder);
    end
    %and what it will be named
    entityname = [unique_prefix '_square_transposer'];

    % vhdlfile = fullfile(vhdlfilefolder, [bdroot '_' unique_prefix '_square_transposer.vhd']);           %filename for vhd file
    vhdlfile = fullfile(vhdlfilefolder, [bdroot '_' entityname '.vhd']);           %filename for vhd file

    upperlines = [
    "-- A wrapper for the square_transposer block."
    "-- This file is generated by `square_transposer_wrappercode_gen.m`"
    "-- @author: Ross Donnachie."
    "-- @company: Mydon Solutions."
    ""
    "LIBRARY IEEE, common_slv_arr_pkg_lib, common_pkg_lib;"
    "USE IEEE.std_logic_1164.all;"
    "USE common_pkg_lib.common_pkg.all;"
    "USE common_slv_arr_pkg_lib.common_slv_arr_pkg.all;"
    ""
    sprintf("ENTITY %s is", entityname)
    "generic ("
    "  g_async : BOOLEAN := FALSE"
    ");"
    "port ("
    "  clk   : in std_logic;"
    "  ce    : in std_logic;"
    "  i_sync  : IN std_logic;"
    "  o_sync  : OUT std_logic;"
    ];

    midlines = [
    ");"
    "end ENTITY;"
    ""
    sprintf("ARCHITECTURE rtl of %s is", entityname)
    sprintf("  SIGNAL slv_arr_in : t_slv_arr(0 to %d-1, i_data_0'range) := (OTHERS => (OTHERS => '0'));", inout_port_count)
    sprintf("  SIGNAL slv_arr_out : t_slv_arr(0 to %d-1, o_data_0'range) := (OTHERS => (OTHERS => '0'));", inout_port_count)
    "begin"
    ""

    sprintf("gen_slv_arr_bit_stitch: for i in 0 to %d-1 generate", inout_port_bit_width)
    "  --v generated slv_array index knit v--"
    ];

    lowerlines = [
    "  --^ generated slv_array index knit ^--"
    "end generate;"
    ""
    "  u_square_transposer : ENTITY work.square_transposer"
    "    generic map ("
    "      g_async => g_async"
    "    )"
    "    port map ("
    "      clk => clk,"
    "      ce => ce,"
    "      i_sync => i_sync,"
    "      i_data => slv_arr_in,"
    "      o_sync => o_sync,"
    "      o_data => slv_arr_out"
    "    );"
    ""
    "end ARCHITECTURE;"
    ];

    Vfile = fopen(vhdlfile,'w');
    if(Vfile == -1)
        error("Cannot open vhdl file");
    end

    fprintf(Vfile,'%s\n',upperlines{:});
    ports = mknprts(inout_port_count, inout_port_bit_width);
    fprintf(Vfile,'%s\n',ports{:});

    fprintf(Vfile,'%s\n',midlines{:});
    assignments = mknassignments(inout_port_count, inout_port_bit_width);
    fprintf(Vfile,'%s\n',assignments{:});

    fprintf(Vfile,'%s\n',lowerlines{:});
    fclose(Vfile);
end

function chararr = mknprts(port_count, port_bit_width)
    chararr = strings(port_count*2,0);
    inport_str = "  i_data_%d : in std_logic_vector(%d-1 downto 0);";
    outport_str = "  o_data_%d : out std_logic_vector(%d-1 downto 0);";
    for i = 1:port_count
        chararr(2*i-1,1)=sprintf(inport_str, i-1, port_bit_width);
        if (i ~= port_count)
            chararr(2*i,1)=sprintf(outport_str, i-1, port_bit_width);
        else
            chararr(2*i,1)=sprintf(strip(outport_str,';'), i-1, port_bit_width);
        end
    end
end

function chararr = mknassignments(port_count, port_bit_width)
    chararr = strings(port_count*2,0);

    inport_str = "  slv_arr_in(%d, i) <= i_data_%d(i);";
    % inport_str = "  i_data_%d <= TO_SVEC(%d, %d);";
    % inport_str = "  slv_arr_set(slv_arr_in, %d, i_data_%d);";
    outport_str = "  o_data_%d(i) <= slv_arr_out(%d, i);";
    % outport_str = "  o_data_%d <= TO_SVEC(%d, %d);";
    % outport_str = "  slv_arr_get(o_data_%d, slv_arr_out, %d);";

    for i = 1:port_count
        chararr(i,1)=sprintf(inport_str, i-1, i-1);
        chararr(port_count + i,1)=sprintf(outport_str, i-1, i-1);
        % chararr(i,1)=sprintf(outport_str, i, i-1);
    end
end
