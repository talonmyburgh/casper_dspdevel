function vhdlfile = bus_create_arbitrary_code_gen(division_bit_widths, unique_prefix)
    %gather all the string arrays required to write full file:
    filepathscript = fileparts(which('bus_create_arbitrary_code_gen'));                 %get the filepath of this script (and thereby all scripts needed)
    %where the top vhdl file will be generated
    vhdlfilefolder = [fileparts(which(bdroot)) '/tmp_dspdevel'];
    if ~exist(vhdlfilefolder, 'dir')
        mkdir(vhdlfilefolder);
    end
    %and what it will be named
    vhdlfile = fullfile(vhdlfilefolder, [bdroot '_' unique_prefix '_bus_create_arbitrary.vhd']);           %filename for vhd file

    entityname = [unique_prefix '_bus_create_arbitrary'];

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%upperdec%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
    upperlines = [
    "-- A VHDL implementation of the CASPER bus_create_arbitrary block."
    "-- This file is generated by `bus_create_arbitrary_code_gen.m`"
    "-- @author: Ross Donnachie."
    "-- @company: Mydon Solutions."
    ""
    "LIBRARY IEEE;"
    "USE IEEE.std_logic_1164.all;"
    ""
    sprintf("ENTITY %s is", entityname)
    "port ("
    "    clk   : in std_logic := '1';"
    "    ce    : in std_logic := '1';"
    ""
    "    o_data   : out std_logic_vector;"
    ];

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%uppermiddec%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
    uppermidlines = [
    ");"
    "end ENTITY;"
    ""
    sprintf("ARCHITECTURE rtl of %s is", entityname)
    "    alias a_data : STD_LOGIC_VECTOR (o_data'length-1 downto 0) is o_data;"
    ];

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%lowermiddec%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
    lowermidlines = [
    "begin"
    ""
    "  -- g_concat : FOR I IN g_division_bit_widths'range GENERATE"
    "  -- begin"
    ];
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%lowerdec%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
    lowerlines = [
    "  -- end GENERATE;"
    ""
    "end ARCHITECTURE;"
    ];
    
    Vfile = fopen(vhdlfile,'w');
    if(Vfile == -1)
        error("Cannot open vhdl file");
    end

    fprintf(Vfile,'%s\n',upperlines{:});
    ports = mknprts(division_bit_widths);
    fprintf(Vfile,'%s\n',ports{:});
    fprintf(Vfile,'%s\n',uppermidlines{:});
    aliases = mknaliases(division_bit_widths);
    fprintf(Vfile,'%s\n',aliases{:});
    fprintf(Vfile,'%s\n',lowermidlines{:});
    arch = mknarch(division_bit_widths);
    fprintf(Vfile,'%s\n',arch{:});
    fprintf(Vfile,'%s\n',lowerlines{:});
    fclose(Vfile);
end

function chararr = mknprts(bit_widths)
    chararr = strings(length(bit_widths),0);
    outdatchar = "\ti_data_%d   : in std_logic_vector;";
    for i = 1:length(bit_widths)
        if (i ~= length(bit_widths))
            chararr(i,1)=sprintf(outdatchar, i);
        else
            chararr(i,1)=sprintf(strip(outdatchar,';'), i);
        end
    end
end

function chararr = mknaliases(bit_widths)
    chararr = strings(length(bit_widths),0);
    outdatchar = "\talias a_data_%d : STD_LOGIC_VECTOR (%d-1 downto 0) is i_data_%d;";
    for i = 1:length(bit_widths)
        chararr(i,1)=sprintf(outdatchar, i, bit_widths(i), i);
    end
end

function chararr = mknarch(bit_widths)
    chararr = strings(length(bit_widths), 0);

    msb_pos = sum(bit_widths);
    outdatchar = "\ta_data(%d-1 downto %d) <= a_data_%d;";
    for i = 1:length(bit_widths)
        chararr(i,1)=sprintf(outdatchar, msb_pos, msb_pos-bit_widths(i), i);
        msb_pos = msb_pos-bit_widths(i);
    end
end
