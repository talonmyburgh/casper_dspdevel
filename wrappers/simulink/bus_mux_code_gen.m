function [vhdlfile, entityname] = bus_mux_code_gen(unique_prefix, input_port_count, bit_width, delay)
    %gather all the string arrays required to write full file:
    filepathscript = fileparts(which('bus_mux_code_gen'));                 %get the filepath of this script (and thereby all scripts needed)
    %where the top vhdl file will be generated
    vhdlfilefolder = [fileparts(which(bdroot)) '/tmp_dspdevel'];
    if ~exist(vhdlfilefolder, 'dir')
        mkdir(vhdlfilefolder);
    end
    %and what it will be named
    entityname = [unique_prefix '_bus_mux'];

    % vhdlfile = fullfile(vhdlfilefolder, [bdroot '_' unique_prefix '_bus_mux.vhd']);           %filename for vhd file
    vhdlfile = fullfile(vhdlfilefolder, [bdroot '_' entityname '.vhd']);           %filename for vhd file

    upperlines = [
    "-- A wrapper for the bus_mux block."
    "-- This file is generated by `bus_mux_code_gen.m`"
    "-- @author: Ross Donnachie."
    "-- @company: Mydon Solutions."
    ""
    "LIBRARY IEEE, common_slv_arr_pkg_lib, common_pkg_lib, casper_bus;"
    "USE IEEE.std_logic_1164.all;"
    "USE common_pkg_lib.common_pkg.all;"
    "USE common_slv_arr_pkg_lib.common_slv_arr_pkg.all;"
    ""
    sprintf("ENTITY %s is", entityname)
    "generic ("
    sprintf("  g_delay : NATURAL := %d", delay)
    ");"
    "port ("
    "  clk   : in std_logic;"
    "  ce    : in std_logic;"
    sprintf("  i_sel   : IN std_logic_vector(%d-1 downto 0);", ceil(log2(input_port_count)))
    "  o_data  : OUT std_logic_vector;"
    ];

    midlines = [
    ");"
    "end ENTITY;"
    ""
    sprintf("ARCHITECTURE rtl of %s is", entityname)
    sprintf("  SIGNAL slv_arr_in : t_slv_arr(0 to %d-1, i_data_1'range) := (OTHERS => (OTHERS => '0'));", input_port_count)
    "begin"
    ""

    sprintf("gen_slv_arr_bit_stitch: for i in 0 to %d-1 generate", bit_width)
    "  --v generated slv_array index knit v--"
    ];

    lowerlines = [
    "  --^ generated slv_array index knit ^--"
    "end generate;"
    ""
    "  u_bus_mux : ENTITY casper_bus.bus_mux"
    "    generic map ("
    "      g_delay => g_delay"
    "    )"
    "    port map ("
    "      clk => clk,"
    "      ce => ce,"
    "      i_sel => i_sel,"
    "      i_data => slv_arr_in,"
    "      o_data => o_data"
    "    );"
    ""
    "end ARCHITECTURE;"
    ];

    Vfile = fopen(vhdlfile,'w');
    if(Vfile == -1)
        error("Cannot open vhdl file");
    end

    fprintf(Vfile,'%s\n',upperlines{:});
    ports = mknprts(input_port_count, bit_width);
    fprintf(Vfile,'%s\n',ports{:});

    fprintf(Vfile,'%s\n',midlines{:});
    assignments = mknassignments(input_port_count);
    fprintf(Vfile,'%s\n',assignments{:});

    fprintf(Vfile,'%s\n',lowerlines{:});
    fclose(Vfile);
end

function chararr = mknprts(port_count, port_bit_width)
    chararr = strings(port_count,0);
    inport_str = "  i_data_%d : in std_logic_vector(%d-1 downto 0);";
    for i = 1:port_count
        if (i ~= port_count)
            chararr(i,1)=sprintf(inport_str, i, port_bit_width);
        else
            chararr(i,1)=sprintf(strip(inport_str,';'), i, port_bit_width);
        end
    end
end

function chararr = mknassignments(port_count)
    chararr = strings(port_count,0);

    inport_str = "  slv_arr_in(%d, i) <= i_data_%d(i);";

    for i = 1:port_count
        chararr(i,1)=sprintf(inport_str, i-1, i);
    end
end
