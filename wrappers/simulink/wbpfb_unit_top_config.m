
function wbpfb_unit_top_config(this_block)

  % Revision History:
  %
  %   12-Aug-2021  (14:06 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\Users\mybur\Work\dspdevel_designs\casper_dspdevel\casper_wbpfb\wbpfb_vivproj\wbpfb_vivproj.srcs\sources_1\new\wbpfb_unit_top.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');
  filepath = fileparts(which('wbpfb_unit_config'));

  this_block.setEntityName('wbpfb_unit_top');

  wb_pfb_blk = this_block.blockName;
  wb_pfb_blk_parent = get_param(wb_pfb_blk, 'Parent');

  %constant widths for 
  dp_stream_bsn = 64;
  bsn_data_type = sprintf('Fix_%d_0',dp_stream_bsn);
  dp_stream_empty = 16;
  empty_data_type = sprintf('Fix_%d_0',dp_stream_empty);
  dp_stream_channel = 32;
  channel_data_type = sprintf('Fix_%d_0',dp_stream_channel);
  dp_stream_error = 32;
  error_data_type = sprintf('Fix_%d_0',dp_stream_error);
  

  function boolval =  checkbox2bool(bxval)
    if strcmp(bxval, 'on')
     boolval= true;
    elseif strcmp(bxval, 'off')
     boolval= false;
    end 
 end

 function strboolval = bool2str(bval)
     if bval
         strboolval = 'TRUE';
     elseif ~bval
         strboolval = 'FALSE';
     end
 end

 %Fetch subsystem mask parameters for dynamic ports:
 use_reorder = get_param(wb_pfb_blk_parent,'use_reorder');
 use_fft_shift = get_param(wb_pfb_blk_parent,'use_fft_shift');
 use_separate = get_param(wb_pfb_blk_parent,'use_separate');
 wb_factor = str2double(get_param(wb_pfb_blk_parent,'wb_factor'));
 if wb_factor<1
      error("Cannot have wideband factor <1"); 
 end
 nof_points = get_param(wb_pfb_blk_parent,'nof_points');
 fft_i_d_w = get_param(wb_pfb_blk_parent,'fft_in_dat_w');
 fil_i_d_w = get_param(wb_pfb_blk_parent,'fil_in_dat_w');
 in_fil_data_type = sprintf('Fix_%s_0', fil_i_d_w);
 fft_o_d_w = get_param(wb_pfb_blk_parent,'fft_out_dat_w');
 out_fft_data_type = sprintf('Fix_%s_0', fft_o_d_w);
 fil_o_d_w = get_param(wb_pfb_blk_parent,'fil_out_dat_w');
 out_fil_data_type = sprintf('Fix_%s_0', fil_o_d_w);
 o_g_w = get_param(wb_pfb_blk_parent,'out_gain_w');
 fft_s_d_w = get_param(wb_pfb_blk_parent,'fft_stage_dat_w');
 fil_c_d_w = get_param(wb_pfb_blk_parent,'fil_coef_dat_w');
 fft_guard_w = get_param(wb_pfb_blk_parent,'fft_guard_w');
 fft_guard_en = get_param(wb_pfb_blk_parent,'fft_guard_enable');
 variant = get_param(wb_pfb_blk_parent,'use_variant');
 technology = get_param(wb_pfb_blk_parent,'vendor_technology');
 use_dsp = get_param(wb_pfb_blk_parent,'use_dsp');
 fft_ovflw_behav = get_param(wb_pfb_blk_parent,'fft_ovflw_behav');
 fft_use_round = get_param(wb_pfb_blk_parent,'fft_use_round');
 fft_ram_primitive = get_param(wb_pfb_blk_parent,'fft_ram_primitive');
 fil_ram_primitive = get_param(wb_pfb_blk_parent,'fil_ram_primitive');
 fifo_primitive = get_param(wb_pfb_blk_parent,'fifo_primitive');
 xtra_dat_sigs = checkbox2bool(get_param(wb_pfb_blk_parent,'xtra_dat_sigs'));
 use_reorder = checkbox2bool(use_reorder);
 use_fft_shift = checkbox2bool(use_fft_shift);
 use_separate = checkbox2bool(use_separate);
 fft_guard_en = checkbox2bool(fft_guard_en);
 win = get_param(wb_pfb_blk_parent, 'win');
 fwidth = get_param(wb_pfb_blk_parent, 'fwidth');
 nof_taps = str2double(get_param(wb_pfb_blk_parent,'nof_taps'));
 nof_wb_streams = get_param(wb_pfb_blk_parent,'nof_wb_streams');
 backoff_w = get_param(wb_pfb_blk_parent,'backoff_w');
 big_endian_wb_in = get_param(wb_pfb_blk_parent,'big_endian_wb_in');
 use_prefilter = get_param(wb_pfb_blk_parent,'use_prefilter');
 dont_flip_channels = get_param(wb_pfb_blk_parent,'dont_flip_channels');

function stages = stagecalc(nof_points)
  stages = ceil(log2(str2double(nof_points)));
end
num_stages = stagecalc(nof_points);
ovflwshiftreg_type = sprintf('UFix_%d_0',num_stages);

%TODO Update the vhdl top file with the required ports per wb_factor:

%If extra data signals are specified, we add them below
if xtra_dat_sigs
  %extra signals inport declarations 
  this_block.addSimulinkInport('in_bsn');
  in_bsn_port = this_block.port('in_bsn');
  in_bsn_port.setType(bsn_data_type);
  in_bsn_port.useHDLVector(true);
  this_block.addSimulinkInport('in_sop');
  in_sop_port = this_block.port('in_sop');
  in_sop_port.setType('UFix_1_0');
  in_sop_port.useHDLVector(false);
  this_block.addSimulinkInport('in_eop');
  in_eop_port = this_block.port('in_eop');
  in_eop_port.setType('UFix_1_0');
  in_eop_port.useHDLVector(false);
  this_block.addSimulinkInport('in_empty');
  in_empty_port = this_block.port('in_empty');
  in_empty_port.setType(empty_data_type);
  in_empty_port.useHDLVector(true);
  this_block.addSimulinkInport('in_err');
  in_err_port = this_block.port('in_err');
  in_err_port.setType(err_data_type);
  in_err_port.useHDLVector(true);
  this_block.addSimulinkInport('in_channel');
  in_channel_port = this_block.port('in_channel');
  in_channel_port.setType(channel_data_type);
  in_channel_port.useHDLVector(true);

  %extra signals outport declarations
  this_block.addSimulinkOutport('out_bsn');
  out_bsn_port = this_block.port('out_bsn');
  out_bsn_port.setType(bsn_data_type);
  out_bsn_port.useHDLVector(true);
  this_block.addSimulinkOutport('out_sop');
  out_sop_port = this_block.port('out_sop');
  out_sop_port.setType('UFix_1_0');
  out_sop_port.useHDLVector(false);
  this_block.addSimulinkOutport('out_eop');
  out_eop_port = this_block.port('out_eop');
  out_eop_port.setType('UFix_1_0');
  out_eop_port.useHDLVector(false);
  this_block.addSimulinkOutport('out_empty');
  out_empty_port = this_block.port('out_empty');
  out_empty_port.setType(empty_data_type);
  out_empty_port.useHDLVector(true);
  this_block.addSimulinkOutport('out_err');
  out_err_port = this_block.port('out_err');
  out_err_port.setType(err_data_type);
  out_err_port.useHDLVector(true);
  this_block.addSimulinkOutport('out_channel');
  out_channel_port = this_block.port('out_channel');
  out_channel_port.setType(channel_data_type);
  out_channel_port.useHDLVector(true);

  %extra signals filport declarations
  this_block.addSimulinkOutport('fil_bsn');
  fil_bsn_port = this_block.port('fil_bsn');
  fil_bsn_port.setType(bsn_data_type);
  fil_bsn_port.useHDLVector(true);
  this_block.addSimulinkOutport('fil_sop');
  fil_sop_port = this_block.port('fil_sop');
  fil_sop_port.setType('UFix_1_0');
  fil_sop_port.useHDLVector(false);
  this_block.addSimulinkOutport('fil_eop');
  fil_eop_port = this_block.port('fil_eop');
  fil_eop_port.setType('UFix_1_0');
  fil_eop_port.useHDLVector(false);
  this_block.addSimulinkOutport('fil_empty');
  fil_empty_port = this_block.port('fil_empty');
  fil_empty_port.setType(empty_data_type);
  fil_empty_port.useHDLVector(true);
  this_block.addSimulinkOutport('fil_err');
  fil_err_port = this_block.port('fil_err');
  fil_err_port.setType(err_data_type);
  fil_err_port.useHDLVector(true);
  this_block.addSimulinkOutport('fil_channel');
  fil_channel_port = this_block.port('fil_channel');
  fil_channel_port.setType(channel_data_type);
  fil_channel_port.useHDLVector(true);
end

%If not, we only make use of the data signals below.

%inport declarations
this_block.addSimulinkInport('rst');
in_rst_port = this_block.port('rst');
in_rst_port.setType('UFix_1_0');
in_rst_port.useHDLVector(false);
this_block.addSimulinkInport('shiftreg');
in_shiftreg_port = this_block.port('shiftreg');
in_shiftreg_port.setType(ovflwshiftreg_type);
in_shiftreg_port.useHDLVector(true);
this_block.addSimulinkInport('in_sync');
in_sync_port = this_block.port('in_sync');
in_sync_port.setType('UFix_1_0');
in_sync_port.useHDLVector(false);
this_block.addSimulinkInport('in_valid');
in_valid_port = this_block.port('in_valid');
in_valid_port.setType('UFix_1_0');
in_valid_port.useHDLVector(false);
%Generate im, re per wb_factor*nof_wb_streams:
for i=0:wb_factor*nof_wb_streams-1
  in_im_port = sprintf('in_im_%d',i);
  this_block.addSimulinkInport(in_im_port);
  in_im = this_block.port(in_im_port);
  in_im.setType(in_fil_data_type);
  in_im.useHDLVector(true);
  
  in_re_port = sprintf('in_re_%d',i);
  this_block.addSimulinkInport(in_re_port);
  in_re = this_block.port(in_re_port);
  in_re.setType(in_fil_data_type);
  in_re.useHDLVector(true);
end

%filport declarations
this_block.addSimulinkOutport('fil_sync');
fil_sync_port = this_block.port('fil_sync');
fil_sync_port.setType('UFix_1_0');
fil_sync_port.useHDLVector(false);
this_block.addSimulinkOutport('fil_valid');
fil_valid_port = this_block.port('fil_valid');
fil_valid_port.setType('UFix_1_0');
fil_valid_port.useHDLVector(false);

for i=0:wb_factor*nof_wb_streams-1
  fil_im_port = sprintf('fil_im_%d',i);
  this_block.addSimulinkOutport(fil_im_port);
  fil_im = this_block.port(fil_im_port);
  fil_im.setType(out_fil_data_type);
  fil_im.useHDLVector(true);

  fil_re_port = sprintf('fil_re_%d',i);
  this_block.addSimulinkOutport(fil_re_port);
  fil_re = this_block.port(fil_re_port);
  fil_re.setType(out_fil_data_type);
  fil_re.useHDLVector(true);
end

%outport declarations
this_block.addSimulinkOutport('out_sync');
out_sync_port = this_block.port('out_sync');
out_sync_port.setType('UFix_1_0');
out_sync_port.useHDLVector(false);
this_block.addSimulinkOutport('out_valid');
out_valid_port = this_block.port('out_valid');
out_valid_port.setType('UFix_1_0');
out_valid_port.useHDLVector(false);
this_block.addSimulinkOutport('ovflw');
out_ovflw_port = this_block.port('ovflw');
out_ovflw_port.setType(ovflwshiftreg_type);
out_shiftreg_port.useHDLVector(true);

for i=0:wb_factor*nof_wb_streams-1
  out_im_port = sprintf('out_im_%d',i);
  this_block.addSimulinkOutport(out_im_port);
  out_im = this_block.port(out_im_port);
  out_im.setType(out_fft_data_type);
  out_im.useHDLVector(true);
  
  out_re_port = sprintf('out_re_%d',i);
  this_block.addSimulinkOutport(out_re_port);
  out_re = this_block.port(out_re_port);
  out_re.setType(out_fft_data_type);
  out_re.useHDLVector(true);
end


  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('g_big_endian_wb_in','boolean',big_endian_wb_in);
  this_block.addGeneric('g_wb_factor','natural',num2str(wb_factor));
  this_block.addGeneric('g_nof_points','natural',nof_points);
  this_block.addGeneric('g_nof_chan','natural',nof_chan);
  this_block.addGeneric('g_nof_wb_streams','natural',nof_wb_streams);
  this_block.addGeneric('g_nof_taps','natural',nof_taps);
  this_block.addGeneric('g_fil_backoff_w','natural',backoff_w);
  this_block.addGeneric('g_fil_in_dat_w','natural',fil_i_d_w);
  this_block.addGeneric('g_fil_out_dat_w','natural',fil_o_d_w);
  this_block.addGeneric('g_coef_dat_w','natural',fil_c_d_w);
  this_block.addGeneric('g_use_reorder','boolean',bool2str(use_reorder));
  this_block.addGeneric('g_use_fft_shift','boolean',bool2str(use_fft_shift));
  this_block.addGeneric('g_use_separate','boolean',bool2str(use_separate));
  this_block.addGeneric('g_fft_in_dat_w','natural',fft_i_d_w);
  this_block.addGeneric('g_fft_out_dat_w','natural',fft_o_d_w);
  this_block.addGeneric('g_fft_out_gain_w',o_g_w);
  this_block.addGeneric('g_stage_dat_w','natural',fft_s_d_w);
  this_block.addGeneric('g_guard_w','natural',fft_guard_w);
  this_block.addGeneric('g_guard_enable','boolean',bool2str(fft_guard_en));
  this_block.addGeneric('g_dont_flip_channels','boolean',dont_flip_channels);
  this_block.addGeneric('g_use_prefilter','boolean',use_prefilter);
  this_block.addGeneric('g_fil_ram_primitive','string',fil_ram_primitive);
  this_block.addGeneric('g_use_variant','string',use_variant);
  this_block.addGeneric('g_use_dsp','string',use_dsp);
  this_block.addGeneric('g_ovflw_behav','string',fft_ovflw_behav);
  this_block.addGeneric('g_use_round','string',fft_use_round);
  this_block.addGeneric('g_fft_ram_primitive','string',fft_ram_primitive);
  this_block.addGeneric('g_fifo_primitive','string',fifo_primitive);

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('C:/Users/mybur/Work/dspdevel_designs/casper_dspdevel/casper_wbpfb/wbpfb_vivproj/wbpfb_vivproj.srcs/sources_1/new/wbpfb_unit_top.vhd');

  return;
end


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 
end
% ------------------------------------------------------------

